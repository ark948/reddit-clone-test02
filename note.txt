1. setting up
    base fastapi application structure
2. setting up environment variables
    (database needs asyncpg)
    > pip install asyncpg
    (if intent to use dotenv)> pip install python-dotenv (WARNING: using 'pip install dotenv' will result in failure)
    (if intent to use pydantic_settings - recommended)> pip install pydantic_settings
3. setting up database
    creating connection and session
    > psql --username=postgres (password: 1234)
    creating database session dependency
    connecting main app instance to database initializer
    adding alembic and database migration:
    > pip install alembic
    > alembic init -t async <migrationFolderName>
4. setting up authentication
    beginning with user model
    to add password hashing, following packages must be isntalled:
    > pip install passlib, bcrypt




packages to install:
pytest, httpx



# @pytest_asyncio.fixture(scope='function')
# async def client() -> AsyncIterator[AsyncClient]:
#     async with AsyncClient(transport=ASGITransport(app=app), base_url="http://test") as client:
#         yield client


running async tests with pytest: sometimes runs them with more than one backend, this is why the number of tests are weird.
(run with pytest -v)